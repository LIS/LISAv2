# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License.

<#
.Synopsis
    This test script validates kubernetes cluster deployment using aks-engine

.Description
    The script creates a environment file which is used by Linux test script
    to create resource group and deploy the cluster.
#>

param([string] $TestParams, [object] $AllVmData)

function Main {
	param (
		$testParams,
		$allVMData,
		$currentTestData
    )

    # Test member variables initialization
	$currentTestResult = Create-TestResultObject
	$testResult = "ABORTED"

    # Local variables
	$testName=$currentTestData.testName

    # Parse test parameters
    try {
		# Extract the parameter for the e2e test
		$location = $testParams.Location
		$apiModel = $testParams.ApiModel
		$timeout = $testParams.Timeout
		$aksEngineUrl = $testParams.AKSEngineRepoUrl
		$aksEngineBinaryUrl = $testParams.AksEngineBinaryUrl
		$shellScriptName = $testParams.ShellScriptName

		$fileName = "setenv"
		$workingDirectory = Get-Location
		$envFilename = Join-Path $workingDirectory $fileName

		# Fetch the Azure credentials for creating Kubernetes cluster
		$tenantID = $Global:XMLSecrets.secrets.SubscriptionServicePrincipalTenantID
		$clientID = $Global:XMLSecrets.secrets.SubscriptionServicePrincipalClientID
		$clientSecret = $Global:XMLSecrets.secrets.SubscriptionServicePrincipalKey
		$subscriptionID = $Global:XMLSecrets.secrets.SubscriptionID

		# Updated environment variables for test
		"CLIENT_ID=$clientID" | Out-File $envFilename
		"CLIENT_SECRET=$clientSecret" | Out-File $envFilename -Append
		"SUBSCRIPTION_ID=$subscriptionID" | Out-File $envFilename -Append
		"TENANT_ID=$tenantID" | Out-File $envFilename -Append
		"LOCATION=$location" | Out-File $envFilename -Append
		"API_MODEL=$apiModel" | Out-File $envFilename -Append
		"AKS_ENGINE_URL=$aksEngineUrl" | Out-File $envFilename -Append
		"AKS_ENGINE_BINARY_URL=$aksEngineBinaryUrl" | Out-File $envFilename -Append

		# Upload the environment files to VM
		Copy-RemoteFiles -uploadTo $allVMData.PublicIP -port $allVMData.SSHPort `
			-files $envFilename -username $user -password $password -upload | Out-Null

		# Run kubernetes cluster deployment test
		$command = "bash /home/$user/$shellScriptName 1> ${testName}_summary.log 2>&1"
		$null = Run-LinuxCmd -username $global:user -password $global:password `
			-ip $allVMData.PublicIP -port $allVMData.SSHPort -command $command `
			-ignoreLinuxExitCode -runAsSudo -runMaxAllowedTime $timeout

		$command = "cat state.txt"
		$testState = Run-LinuxCmd -username  $global:user -password  $global:password `
			-ip $allVMData.PublicIP -port $allVMData.SSHPort -command $command `
			-ignoreLinuxExitCode -runAsSudo -runMaxAllowedTime $timeout

		# Collect the logs generated by shell script
		$null = Collect-TestLogs -LogsDestination $LogDir -ScriptName $shellScriptName `
			-TestType "sh" -PublicIP $allVMData.PublicIP -SSHPort $allVMData.SSHPort `
			-Username $global:user -Password $global:password -TestName $testName

		if ($testState -eq "TestCompleted") {
			$testResult = "PASS"
			Write-LogInfo "Test PASSED"
		} else {
			$testResult = "FAIL"
			Write-LogErr "Test FAILED"
		}
	} catch {
		$ErrorMessage =  $_.Exception.Message
		$ErrorLine = $_.InvocationInfo.ScriptLineNumber
		Write-LogErr "EXCEPTION : $ErrorMessage at line: $ErrorLine"
		$testResult = "FAIL"
	}
	$currentTestResult.TestResult = Get-FinalResultHeader -resultarr $testResult

	return $currentTestResult
}

Main -testParam (ConvertFrom-StringData $TestParams.Replace(";","`n")) `
	-allVMData $AllVmData -currentTestData $CurrentTestData