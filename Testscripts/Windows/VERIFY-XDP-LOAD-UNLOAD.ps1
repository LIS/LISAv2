# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License.

<#
.Description
    This script deploys the VM, verifies XDP with multiple load unload tests
#>

param([object] $AllVmData,
    [object] $CurrentTestData)

$MIN_KERNEL_VERSION = "5.6"
$iFaceName = "eth1"

# This function will start ping and xdpdump on client
function Ping-XDPDump {
    $VMData = $args[0]
    $IP = $args[1]
    $NIC = $args[2]
    $LogSuffix = $args[3]
    # Start Ping test
    $ping_command = "ping -I $NIC -c 30 $IP > ~/pingOut$LogSuffix.txt"
    Write-LogInfo "Starting command: $ping_command on $($VMData.RoleName)"
    Run-LinuxCmd -ip $VMData.PublicIP -port $VMData.SSHPort -username $user -password $password `
        -command $ping_command -RunInBackground -runAsSudo

    # Start XDPDump
    $xdp_command = "cd /root/bpf-samples/xdpdump && timeout 10 ./xdpdump -i $NIC > ~/xdpdumpout$LogSuffix.txt"
    $testJob = Run-LinuxCmd -ip $VMData.PublicIP -port $VMData.SSHPort -username $user -password $password `
        -command $xdp_command -RunInBackground -runAsSudo
    $timer = 0
    while ((Get-Job -Id $testJob).State -eq "Running") {
        $currentStatus = Run-LinuxCmd -ip $VMData.PublicIP -port $VMData.SSHPort -username $user -password $password `
            -command "tail -2 ~/xdpdumpout$LogSuffix.txt | head -1" -runAsSudo
        Write-LogInfo "Current Test Status: $currentStatus"
        Wait-Time -seconds 20
        $timer += 1
        if ($timer -gt 15) {
            Throw "XDPSetup did not stop after 5 mins. Please check xdpdumpout$LogSuffix.txt."
        }
    }

    $currentStatus = Run-LinuxCmd -ip $VMData.PublicIP -port $VMData.SSHPort -username $user -password $password `
        -command "tail -1 ~/xdpdumpout$LogSuffix.txt" -runAsSudo
    if ($currentStatus -inotmatch "unloading xdp") {
        Write-LogErr "XDP Dump did not exit properly"
        Throw "XDP Dump Execution failed for ip:$($VMData.PublicIP) device:$NIC for count: $LogSuffix"
    }
    Write-LogInfo "XDPDump application ran successfully for count: $LogSuffix"
    return "PASS"
}

function Main {
    try {
        $noReceiver = $true
        $noSender = $true
        foreach ($vmData in $allVMData) {
            if ($vmData.RoleName -imatch "receiver") {
                $receiverVMData = $vmData
                $noReceiver = $false
            }
            elseif ($vmData.RoleName -imatch "sender") {
                $noSender = $false
                $senderVMData = $vmData
            }
        }
        if ($noReceiver) {
            Throw "No receiver VM defined. Aborting Test."
        }
        if ($noSender) {
            Throw "No sender VM defined. Aborting Test."
        }

        #CONFIGURE VM Details
        Write-LogInfo "Receiver VM details :"
        Write-LogInfo "  RoleName : $($receiverVMData.RoleName)"
        Write-LogInfo "  Public IP : $($receiverVMData.PublicIP)"
        Write-LogInfo "  SSH Port : $($receiverVMData.SSHPort)"
        Write-LogInfo "  Internal IP : $($receiverVMData.InternalIP)"
        Write-LogInfo "Sender VM details :"
        Write-LogInfo "  RoleName : $($senderVMData.RoleName)"
        Write-LogInfo "  Public IP : $($senderVMData.PublicIP)"
        Write-LogInfo "  SSH Port : $($senderVMData.SSHPort)"
        Write-LogInfo "  Internal IP : $($senderVMData.InternalIP)"

        # Check for compatible kernel
        $currentKernelVersion = Run-LinuxCmd -ip $receiverVMData.PublicIP -port $receiverVMData.SSHPort `
            -username $user -password $password -command "uname -r"
        # ToDo: Update Minimum kernel version check once patches are in downstream distro.
        if ((Compare-KernelVersion $currentKernelVersion $MIN_KERNEL_VERSION) -lt 0 -or $global:DetectedDistro -ne "UBUNTU"){
            Write-LogInfo "Minimum kernel version required for XDP: $MIN_KERNEL_VERSION."`
                "Unsupported kernel version: $currentKernelVersion or Unsupported distro: $($global:DetectedDistro)."
            return $global:ResultSkipped
        }

        # PROVISION VMS FOR LISA WILL ENABLE ROOT USER AND WILL MAKE ENABLE PASSWORDLESS AUTHENTICATION ACROSS ALL VMS.
        Provision-VMsForLisa -allVMData $allVMData -installPackagesOnRoleNames "none"

        # Generate constants.sh and write all VM info into it
        Write-LogInfo "Generating constants.sh ..."
        $constantsFile = "$LogDir\constants.sh"
        Set-Content -Value "# Generated by Azure Automation." -Path $constantsFile
        Add-Content -Value "ip=$($receiverVMData.InternalIP)" -Path $constantsFile
        Add-Content -Value "nicName=$iFaceName" -Path $constantsFile
        foreach ($param in $currentTestData.TestParameters.param) {
            Add-Content -Value "$param" -Path $constantsFile
        }
        Write-LogInfo "constants.sh created successfully..."
        Write-LogInfo (Get-Content -Path $constantsFile)
        $installXDPCommand = @"
./XDPDumpSetup.sh 2>&1 > ~/xdpConsoleLogs.txt
. utils.sh
collect_VM_properties
"@
        Set-Content "$LogDir\StartXDPSetup.sh" $installXDPCommand
        Copy-RemoteFiles -uploadTo $receiverVMData.PublicIP -port $receiverVMData.SSHPort `
            -files "$constantsFile,$LogDir\StartXDPSetup.sh" `
            -username $user -password $password -upload -runAsSudo

        Run-LinuxCmd -ip $receiverVMData.PublicIP -port $receiverVMData.SSHPort `
            -username $user -password $password -command "chmod +x *.sh" -runAsSudo | Out-Null
        $testJob = Run-LinuxCmd -ip $receiverVMData.PublicIP -port $receiverVMData.SSHPort `
            -username $user -password $password -command "./StartXDPSetup.sh" `
            -RunInBackground -runAsSudo
        # Terminate process if ran more than 5 mins
        # TODO: Check max installation time for other distros when added
        $timer = 0
        while ((Get-Job -Id $testJob).State -eq "Running") {
            $currentStatus = Run-LinuxCmd -ip $receiverVMData.PublicIP -port $receiverVMData.SSHPort `
                -username $user -password $password -command "tail -2 ~/xdpConsoleLogs.txt | head -1" -runAsSudo
            Write-LogInfo "Current Test Status: $currentStatus"
            Wait-Time -seconds 20
            $timer += 1
            if ($timer -gt 15) {
                Throw "XDPSetup did not stop after 5 mins. Please check logs."
            }
        }

        $currentState = Run-LinuxCmd -ip $receiverVMData.PublicIP -port $receiverVMData.SSHPort `
            -username $user -password $password -command "cat state.txt" -runAsSudo
        if ($currentState -imatch "TestCompleted") {
            Write-LogInfo "XDPSetup successfully ran on $($receiverVMDAta.RoleName)"

            # Run XDP Load unload 3 times
            $count_unload = 3
            $curr_count = 0
            while ( $curr_count -lt $count_unload) {
                $testResult = Ping-XDPDump $receiverVMData $senderVMData.SecondInternalIP $iFaceName "_$curr_count"
                $curr_count++
            }

        }   elseif ($currentState -imatch "TestAborted") {
            Write-LogErr "Test Aborted. Last known status: $currentStatus."
            $testResult = "ABORTED"
        }   elseif ($currentState -imatch "TestSkipped") {
            Write-LogErr "Test Skipped. Last known status: $currentStatus"
            $testResult = "SKIPPED"
        }   elseif ($currentState -imatch "TestFailed") {
            Write-LogErr "Test failed. Last known status: $currentStatus."
            $testResult = "FAIL"
        }   else {
            Write-LogErr "Test execution is not successful, check test logs in VM."
            $testResult = "ABORTED"
        }

        Copy-RemoteFiles -downloadFrom $receiverVMData.PublicIP -port $receiverVMData.SSHPort `
            -username $user -password $password -download `
            -downloadTo $LogDir -files "*.txt, *.log, *.csv"
    } catch {
        $ErrorMessage = $_.Exception.Message
        $ErrorLine = $_.InvocationInfo.ScriptLineNumber
        Write-LogErr "EXCEPTION : $ErrorMessage at line: $ErrorLine"
        $testResult = "ABORTED"
    } finally {
        if (!$testResult) {
            $testResult = "ABORTED"
        }
        $resultArr += $testResult
    }
    Write-LogInfo "Test result: $testResult"
    return $testResult
}

Main
